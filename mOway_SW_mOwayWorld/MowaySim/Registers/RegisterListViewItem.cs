using System;
using System.Drawing;
using System.Windows.Forms;

using Moway.Template;

namespace Moway.Simulator.Registers
{
    /// <summary>
    /// Represents an item in the ListView specific to Records
    /// </summary>
    /// <LastRevision>08.06.2012</LastRevision>
    /// <Revisor>Jonathan Ruiz de Garibay</Revisor>
    public partial class RegisterListViewItem : UserControl
    {
        #region Attributes

        /// <summary>
        /// Record to which it represents
        /// </summary>
        private Register register;
        /// <summary>
        /// Status of selected item
        /// </summary>
        private bool selected = false;

        #endregion

        #region Properties

        /// <summary>
        /// Main text of the item
        /// </summary>
        public override string Text { get { return this.lName.Text; } }
        /// <summary>
        /// Selection state of the item
        /// </summary>
        public bool Selected
        {
            get { return this.selected; }
            set
            {
                if (this.selected != value)
                {
                    this.selected = value;
                    if (this.selected)
                        this.BackColor = MowayColors.Selection;
                    else
                        this.BackColor = SystemColors.Window;
                }
            }
        }

        #endregion

        #region Events

        /// <summary>
        /// Selection event of the item
        /// </summary>
        public event EventHandler ItemSelected;

        #endregion

        /// <summary>
        /// Builder
        /// </summary>
        /// <param name="register">Register to represent</param>
        public RegisterListViewItem(Register register)
        {
            InitializeComponent();
            this.register = register;
            //Register events are logged
            this.register.ValueChanged += new EventHandler(Register_ValueChanged);
            this.register.NameChanged += new EventHandler(Register_NameChanged);
            //The register data is displayed in the item
            this.lName.Text = register.Name;
            this.lValue.Text = register.Value.ToString();
        }

        #region Form Events

        /// <summary>
        /// Event of touch on registration
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void RegisterListViewItem_Click(object sender, EventArgs e)
        {
            if (!this.selected)
            {
                this.selected = true;
                this.BackColor = MowayColors.Selection;
                if (this.ItemSelected != null)
                    this.ItemSelected(this, new EventArgs());
            }
        }

        #endregion

        #region Events generated by the registry

        /// <summary>
        /// Change in the name of the register
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void Register_NameChanged(object sender, EventArgs e)
        {
            //The method must be invoked to run on the correct thread
            if (this.lName.InvokeRequired)
                this.Invoke(new EventHandler(this.Register_NameChanged), new object[] { sender, e });
            else
                //Updates the register name
                this.lName.Text = this.register.Name;
        }

        /// <summary>
        /// Change in the registry value
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void Register_ValueChanged(object sender, EventArgs e)
        {
            //The method must be invoked to run on the correct thread
            if (this.lValue.InvokeRequired)
                this.Invoke(new EventHandler(this.Register_ValueChanged), new object[] { sender, e });
            else
                //Updates the registry value
                this.lValue.Text = this.register.Value.ToString();
        }

        #endregion
    }
}
